{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/allam/Documents/Projects/AXIS/app/api/upload/route.js"],"sourcesContent":["import { S3Client, PutObjectCommand, GetObjectCommand, ListObjectsV2Command } from '@aws-sdk/client-s3';\r\nimport { NextResponse } from 'next/server';\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\n\r\n\r\n// Create S3 Client instance\r\nconst s3 = new S3Client({\r\n  region: process.env.AWS_REGION || 'us-east-1',\r\n  credentials: {\r\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\r\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\r\n    sessionToken: process.env.AWS_SESSION_TOKEN,\r\n  },\r\n});\r\n\r\n// API Route to get file from S3\r\nexport async function GET(req) {\r\n  try {\r\n    // Validate environment variables\r\n    if (!process.env.AWS_BUCKET_NAME) {\r\n      return NextResponse.json({ error: 'AWS bucket not configured' }, { status: 500 });\r\n    }\r\n    if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {\r\n      return NextResponse.json({ error: 'AWS credentials not configured' }, { status: 500 });\r\n    }\r\n\r\n    const { searchParams } = new URL(req.url);\r\n    const action = searchParams.get('action');\r\n    \r\n    // Handle GETALL action\r\n    if (action === 'getall') {\r\n      return await handleGetAll();\r\n    }\r\n    \r\n    const fileKey = searchParams.get('key');\r\n\r\n    if (!fileKey) {\r\n      return NextResponse.json({ error: 'File key parameter required' }, { status: 400 });\r\n    }\r\n\r\n    // Validate file key format\r\n    if (fileKey.includes('..') || fileKey.startsWith('/')) {\r\n      return NextResponse.json({ error: 'Invalid file key format' }, { status: 400 });\r\n    }\r\n\r\n    console.log('Retrieving file:', fileKey);\r\n\r\n    const command = new GetObjectCommand({\r\n      Bucket: process.env.AWS_BUCKET_NAME,\r\n      Key: fileKey,\r\n    });\r\n\r\n    const data = await s3.send(command);\r\n    const filename = fileKey.split('/').pop() || 'download';\r\n\r\n    return new NextResponse(data.Body, {\r\n      headers: {\r\n        'Content-Type': data.ContentType || 'application/octet-stream',\r\n        'Content-Disposition': `attachment; filename=\"${filename}\"`,\r\n        'Content-Length': data.ContentLength?.toString() || '',\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error('File retrieval failed:', error.message);\r\n    \r\n    if (error.name === 'NoSuchKey') {\r\n      return NextResponse.json({ error: 'File not found' }, { status: 404 });\r\n    }\r\n    if (error.name === 'NoSuchBucket') {\r\n      return NextResponse.json({ error: 'S3 bucket not found' }, { status: 404 });\r\n    }\r\n    if (error.name === 'AccessDenied') {\r\n      return NextResponse.json({ error: 'Access denied to file' }, { status: 403 });\r\n    }\r\n    if (error.name === 'CredentialsError') {\r\n      return NextResponse.json({ error: 'Invalid AWS credentials' }, { status: 401 });\r\n    }\r\n    \r\n    return NextResponse.json({ \r\n      error: 'Failed to retrieve file', \r\n      details: error.message \r\n    }, { status: 500 });\r\n  }\r\n}\r\n\r\nconst execAsync = promisify(exec);\r\n\r\nasync function handleGetAll() {\r\n  try {\r\n    // List all files in posture folder\r\n    const listCommand = new ListObjectsV2Command({\r\n      Bucket: process.env.AWS_BUCKET_NAME,\r\n      Prefix: 'posture/'\r\n    });\r\n\r\n    const listResult = await s3.send(listCommand);\r\n    const files = listResult.Contents || [];\r\n\r\n    if (files.length === 0) {\r\n      return NextResponse.json({ error: 'No files found in posture folder' }, { status: 404 });\r\n    }\r\n\r\n    // Fetch all JSON files as separate objects\r\n    const allFiles = [];\r\n    \r\n    for (const file of files) {\r\n      if (file.Key.endsWith('.json')) {\r\n        try {\r\n          const getCommand = new GetObjectCommand({\r\n            Bucket: process.env.AWS_BUCKET_NAME,\r\n            Key: file.Key\r\n          });\r\n          \r\n          const data = await s3.send(getCommand);\r\n          const text = await data.Body.transformToString();\r\n          const jsonData = JSON.parse(text);\r\n          \r\n          if (jsonData.sessions) {\r\n            // Sort sessions within each file\r\n            jsonData.sessions.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n            allFiles.push({\r\n              filename: file.Key,\r\n              ...jsonData\r\n            });\r\n          }\r\n        } catch (fileError) {\r\n          console.error(`Error reading file ${file.Key}:`, fileError.message);\r\n        }\r\n      }\r\n    }\r\n\r\n    return NextResponse.json({ files: allFiles });\r\n  } catch (error) {\r\n    console.error('GETALL failed:', error.message);\r\n    return NextResponse.json({ error: 'Failed to fetch all files', details: error.message }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req) {\r\n  try {\r\n    // Validate environment variables\r\n    if (!process.env.AWS_BUCKET_NAME) {\r\n      return NextResponse.json({ error: 'AWS bucket not configured' }, { status: 500 });\r\n    }\r\n    if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {\r\n      return NextResponse.json({ error: 'AWS credentials not configured' }, { status: 500 });\r\n    }\r\n\r\n    const formData = await req.formData();\r\n    const file = formData.get('file');\r\n\r\n    if (!file) {\r\n      return NextResponse.json({ error: 'No file provided' }, { status: 400 });\r\n    }\r\n\r\n    if (file.size > 10 * 1024 * 1024) { // 10MB limit\r\n      return NextResponse.json({ error: 'File too large (max 10MB)' }, { status: 400 });\r\n    }\r\n\r\n    console.log('Processing file:', file.name, `${(file.size / 1024).toFixed(1)}KB`);\r\n\r\n    const buffer = Buffer.from(await file.arrayBuffer());\r\n    const s3Key = `posture/${Date.now()}_${file.name}`;\r\n    \r\n    const command = new PutObjectCommand({\r\n      Bucket: process.env.AWS_BUCKET_NAME,\r\n      Key: s3Key,\r\n      Body: buffer,\r\n      ContentType: file.type,\r\n    });\r\n\r\n    const uploadResult = await s3.send(command);\r\n    console.log('S3 upload successful:', s3Key);\r\n\r\n    // Run Python script\r\n    try {\r\n      const pythonResult = await execAsync(`python process_s3_file.py ${process.env.AWS_BUCKET_NAME} ${s3Key}`);\r\n      \r\n      return NextResponse.json({ \r\n        message: 'File uploaded and processed successfully',\r\n        filename: file.name,\r\n        s3Key: s3Key,\r\n        pythonOutput: pythonResult.stdout.trim()\r\n      });\r\n    } catch (pythonError) {\r\n      console.error('Python processing failed:', pythonError.message);\r\n      return NextResponse.json({ \r\n        message: 'File uploaded successfully but processing failed',\r\n        filename: file.name,\r\n        s3Key: s3Key,\r\n        error: `Processing error: ${pythonError.message}`\r\n      }, { status: 207 }); // 207 Multi-Status\r\n    }\r\n  } catch (error) {\r\n    console.error('Upload failed:', error.message);\r\n    \r\n    if (error.name === 'CredentialsError') {\r\n      return NextResponse.json({ error: 'Invalid AWS credentials' }, { status: 401 });\r\n    }\r\n    if (error.name === 'NoSuchBucket') {\r\n      return NextResponse.json({ error: 'S3 bucket not found' }, { status: 404 });\r\n    }\r\n    if (error.name === 'AccessDenied') {\r\n      return NextResponse.json({ error: 'Access denied to S3 bucket' }, { status: 403 });\r\n    }\r\n    \r\n    return NextResponse.json({ \r\n      error: 'Upload failed', \r\n      details: error.message \r\n    }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}