{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/allam/Documents/Projects/AXIS/app/components/InfiniteGallery.tsx"],"sourcesContent":["'use client';\r\n\r\nimport type React from 'react';\r\nimport { useRef, useMemo, useCallback, useState, useEffect } from 'react';\r\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\r\nimport { useTexture } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\n\r\ntype ImageItem = string | { src: string; alt?: string };\r\n\r\ninterface FadeSettings {\r\n\t/** Fade in range as percentage of depth range (0-1) */\r\n\tfadeIn: {\r\n\t\tstart: number;\r\n\t\tend: number;\r\n\t};\r\n\t/** Fade out range as percentage of depth range (0-1) */\r\n\tfadeOut: {\r\n\t\tstart: number;\r\n\t\tend: number;\r\n\t};\r\n}\r\n\r\ninterface BlurSettings {\r\n\t/** Blur in range as percentage of depth range (0-1) */\r\n\tblurIn: {\r\n\t\tstart: number;\r\n\t\tend: number;\r\n\t};\r\n\t/** Blur out range as percentage of depth range (0-1) */\r\n\tblurOut: {\r\n\t\tstart: number;\r\n\t\tend: number;\r\n\t};\r\n\t/** Maximum blur amount (0-10, higher values = more blur) */\r\n\tmaxBlur: number;\r\n}\r\n\r\ninterface InfiniteGalleryProps {\r\n\timages: ImageItem[];\r\n\t/** Speed multiplier applied to scroll delta (default: 1) */\r\n\tspeed?: number;\r\n\t/** Spacing between images along Z in world units (default: 2.5) */\r\n\tzSpacing?: number;\r\n\t/** Number of visible planes (default: clamp to images.length, min 8) */\r\n\tvisibleCount?: number;\r\n\t/** Near/far distances for opacity/blur easing (default: { near: 0.5, far: 12 }) */\r\n\tfalloff?: { near: number; far: number };\r\n\t/** Fade in/out settings with ranges based on depth range percentage (default: { fadeIn: { start: 0.05, end: 0.15 }, fadeOut: { start: 0.85, end: 0.95 } }) */\r\n\tfadeSettings?: FadeSettings;\r\n\t/** Blur in/out settings with ranges based on depth range percentage (default: { blurIn: { start: 0.0, end: 0.1 }, blurOut: { start: 0.9, end: 1.0 }, maxBlur: 3.0 }) */\r\n\tblurSettings?: BlurSettings;\r\n\t/** Optional className for outer container */\r\n\tclassName?: string;\r\n\t/** Optional style for outer container */\r\n\tstyle?: React.CSSProperties;\r\n}\r\n\r\ninterface PlaneData {\r\n\tindex: number;\r\n\tz: number;\r\n\timageIndex: number;\r\n\tx: number;\r\n\ty: number; // Added y property for vertical positioning\r\n}\r\n\r\nconst DEFAULT_DEPTH_RANGE = 50;\r\nconst MAX_HORIZONTAL_OFFSET = 8;\r\nconst MAX_VERTICAL_OFFSET = 8;\r\n\r\n// Custom shader material for blur, opacity, and cloth folding effects\r\nconst createClothMaterial = () => {\r\n\treturn new THREE.ShaderMaterial({\r\n\t\ttransparent: true,\r\n\t\tuniforms: {\r\n\t\t\tmap: { value: null },\r\n\t\t\topacity: { value: 1.0 },\r\n\t\t\tblurAmount: { value: 0.0 },\r\n\t\t\tscrollForce: { value: 0.0 },\r\n\t\t\ttime: { value: 0.0 },\r\n\t\t\tisHovered: { value: 0.0 },\r\n\t\t},\r\n\t\tvertexShader: `\r\n      uniform float scrollForce;\r\n      uniform float time;\r\n      uniform float isHovered;\r\n      varying vec2 vUv;\r\n      varying vec3 vNormal;\r\n      \r\n      void main() {\r\n        vUv = uv;\r\n        vNormal = normal;\r\n        \r\n        vec3 pos = position;\r\n        \r\n        // Create smooth curving based on scroll force\r\n        float curveIntensity = scrollForce * 0.3;\r\n        \r\n        // Base curve across the plane based on distance from center\r\n        float distanceFromCenter = length(pos.xy);\r\n        float curve = distanceFromCenter * distanceFromCenter * curveIntensity;\r\n        \r\n        // Add gentle cloth-like ripples\r\n        float ripple1 = sin(pos.x * 2.0 + scrollForce * 3.0) * 0.02;\r\n        float ripple2 = sin(pos.y * 2.5 + scrollForce * 2.0) * 0.015;\r\n        float clothEffect = (ripple1 + ripple2) * abs(curveIntensity) * 2.0;\r\n        \r\n        // Flag waving effect when hovered\r\n        float flagWave = 0.0;\r\n        if (isHovered > 0.5) {\r\n          // Create flag-like wave from left to right\r\n          float wavePhase = pos.x * 3.0 + time * 8.0;\r\n          float waveAmplitude = sin(wavePhase) * 0.1;\r\n          // Damping effect - stronger wave on the right side (free edge)\r\n          float dampening = smoothstep(-0.5, 0.5, pos.x);\r\n          flagWave = waveAmplitude * dampening;\r\n          \r\n          // Add secondary smaller waves for more realistic flag motion\r\n          float secondaryWave = sin(pos.x * 5.0 + time * 12.0) * 0.03 * dampening;\r\n          flagWave += secondaryWave;\r\n        }\r\n        \r\n        // Apply Z displacement for curving effect (inverted) with cloth ripples and flag wave\r\n        pos.z -= (curve + clothEffect + flagWave);\r\n        \r\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\r\n      }\r\n    `,\r\n\t\tfragmentShader: `\r\n      uniform sampler2D map;\r\n      uniform float opacity;\r\n      uniform float blurAmount;\r\n      uniform float scrollForce;\r\n      varying vec2 vUv;\r\n      varying vec3 vNormal;\r\n      \r\n      void main() {\r\n        vec4 color = texture2D(map, vUv);\r\n        \r\n        // Simple blur approximation\r\n        if (blurAmount > 0.0) {\r\n          vec2 texelSize = 1.0 / vec2(textureSize(map, 0));\r\n          vec4 blurred = vec4(0.0);\r\n          float total = 0.0;\r\n          \r\n          for (float x = -2.0; x <= 2.0; x += 1.0) {\r\n            for (float y = -2.0; y <= 2.0; y += 1.0) {\r\n              vec2 offset = vec2(x, y) * texelSize * blurAmount;\r\n              float weight = 1.0 / (1.0 + length(vec2(x, y)));\r\n              blurred += texture2D(map, vUv + offset) * weight;\r\n              total += weight;\r\n            }\r\n          }\r\n          color = blurred / total;\r\n        }\r\n        \r\n        // Add subtle lighting effect based on curving\r\n        float curveHighlight = abs(scrollForce) * 0.05;\r\n        color.rgb += vec3(curveHighlight * 0.1);\r\n        \r\n        gl_FragColor = vec4(color.rgb, color.a * opacity);\r\n      }\r\n    `,\r\n\t});\r\n};\r\n\r\nfunction ImagePlane({\r\n\ttexture,\r\n\tposition,\r\n\tscale,\r\n\tmaterial,\r\n}: {\r\n\ttexture: THREE.Texture;\r\n\tposition: [number, number, number];\r\n\tscale: [number, number, number];\r\n\tmaterial: THREE.ShaderMaterial;\r\n}) {\r\n\tconst meshRef = useRef<THREE.Mesh>(null);\r\n\tconst [isHovered, setIsHovered] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (material && texture) {\r\n\t\t\tmaterial.uniforms.map.value = texture;\r\n\t\t}\r\n\t}, [material, texture]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (material && material.uniforms) {\r\n\t\t\tmaterial.uniforms.isHovered.value = isHovered ? 1.0 : 0.0;\r\n\t\t}\r\n\t}, [material, isHovered]);\r\n\r\n\treturn (\r\n\t\t<mesh\r\n\t\t\tref={meshRef}\r\n\t\t\tposition={position}\r\n\t\t\tscale={scale}\r\n\t\t\tmaterial={material}\r\n\t\t\tonPointerEnter={() => setIsHovered(true)}\r\n\t\t\tonPointerLeave={() => setIsHovered(false)}\r\n\t\t>\r\n\t\t\t<planeGeometry args={[1, 1, 32, 32]} />\r\n\t\t</mesh>\r\n\t);\r\n}\r\n\r\nfunction GalleryScene({\r\n\timages,\r\n\tspeed = 1,\r\n\tvisibleCount = 8,\r\n\tfadeSettings = {\r\n\t\tfadeIn: { start: 0.05, end: 0.15 },\r\n\t\tfadeOut: { start: 0.85, end: 0.95 },\r\n\t},\r\n\tblurSettings = {\r\n\t\tblurIn: { start: 0.0, end: 0.1 },\r\n\t\tblurOut: { start: 0.9, end: 1.0 },\r\n\t\tmaxBlur: 3.0,\r\n\t},\r\n}: Omit<InfiniteGalleryProps, 'className' | 'style'>) {\r\n\tconst [scrollVelocity, setScrollVelocity] = useState(0);\r\n\tconst [autoPlay, setAutoPlay] = useState(true);\r\n\tconst lastInteraction = useRef(Date.now());\r\n\r\n\t// Normalize images to objects\r\n\tconst normalizedImages = useMemo(\r\n\t\t() =>\r\n\t\t\timages.map((img) =>\r\n\t\t\t\ttypeof img === 'string' ? { src: img, alt: '' } : img\r\n\t\t\t),\r\n\t\t[images]\r\n\t);\r\n\r\n\t// Load textures\r\n\tconst textures = useTexture(normalizedImages.map((img) => img.src));\r\n\r\n\t// Create materials pool\r\n\tconst materials = useMemo(\r\n\t\t() => Array.from({ length: visibleCount }, () => createClothMaterial()),\r\n\t\t[visibleCount]\r\n\t);\r\n\r\n\tconst spatialPositions = useMemo(() => {\r\n\t\tconst positions: { x: number; y: number }[] = [];\r\n\t\tconst maxHorizontalOffset = MAX_HORIZONTAL_OFFSET;\r\n\t\tconst maxVerticalOffset = MAX_VERTICAL_OFFSET;\r\n\r\n\t\tfor (let i = 0; i < visibleCount; i++) {\r\n\t\t\t// Create varied distribution patterns for both axes\r\n\t\t\tconst horizontalAngle = (i * 2.618) % (Math.PI * 2); // Golden angle for natural distribution\r\n\t\t\tconst verticalAngle = (i * 1.618 + Math.PI / 3) % (Math.PI * 2); // Offset angle for vertical\r\n\r\n\t\t\tconst horizontalRadius = (i % 3) * 1.2; // Vary the distance from center\r\n\t\t\tconst verticalRadius = ((i + 1) % 4) * 0.8; // Different pattern for vertical\r\n\r\n\t\t\tconst x =\r\n\t\t\t\t(Math.sin(horizontalAngle) * horizontalRadius * maxHorizontalOffset) /\r\n\t\t\t\t3;\r\n\t\t\tconst y =\r\n\t\t\t\t(Math.cos(verticalAngle) * verticalRadius * maxVerticalOffset) / 4;\r\n\r\n\t\t\tpositions.push({ x, y });\r\n\t\t}\r\n\r\n\t\treturn positions;\r\n\t}, [visibleCount]);\r\n\r\n\tconst totalImages = normalizedImages.length;\r\n\tconst depthRange = DEFAULT_DEPTH_RANGE;\r\n\r\n\t// Initialize plane data\r\n\tconst planesData = useRef<PlaneData[]>(\r\n\t\tArray.from({ length: visibleCount }, (_, i) => ({\r\n\t\t\tindex: i,\r\n\t\t\tz: visibleCount > 0 ? ((depthRange / visibleCount) * i) % depthRange : 0,\r\n\t\t\timageIndex: totalImages > 0 ? i % totalImages : 0,\r\n\t\t\tx: spatialPositions[i]?.x ?? 0, // Use spatial positions for x\r\n\t\t\ty: spatialPositions[i]?.y ?? 0, // Use spatial positions for y\r\n\t\t}))\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tplanesData.current = Array.from({ length: visibleCount }, (_, i) => ({\r\n\t\t\tindex: i,\r\n\t\t\tz:\r\n\t\t\t\tvisibleCount > 0\r\n\t\t\t\t\t? ((depthRange / Math.max(visibleCount, 1)) * i) % depthRange\r\n\t\t\t\t\t: 0,\r\n\t\t\timageIndex: totalImages > 0 ? i % totalImages : 0,\r\n\t\t\tx: spatialPositions[i]?.x ?? 0,\r\n\t\t\ty: spatialPositions[i]?.y ?? 0,\r\n\t\t}));\r\n\t}, [depthRange, spatialPositions, totalImages, visibleCount]);\r\n\r\n\t// Handle scroll input\r\n\tconst handleWheel = useCallback(\r\n\t\t(event: WheelEvent) => {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tsetScrollVelocity((prev) => prev + event.deltaY * 0.01 * speed);\r\n\t\t\tsetAutoPlay(false);\r\n\t\t\tlastInteraction.current = Date.now();\r\n\t\t},\r\n\t\t[speed]\r\n\t);\r\n\r\n\t// Handle keyboard input\r\n\tconst handleKeyDown = useCallback(\r\n\t\t(event: KeyboardEvent) => {\r\n\t\t\tif (event.key === 'ArrowUp' || event.key === 'ArrowLeft') {\r\n\t\t\t\tsetScrollVelocity((prev) => prev - 2 * speed);\r\n\t\t\t\tsetAutoPlay(false);\r\n\t\t\t\tlastInteraction.current = Date.now();\r\n\t\t\t} else if (event.key === 'ArrowDown' || event.key === 'ArrowRight') {\r\n\t\t\t\tsetScrollVelocity((prev) => prev + 2 * speed);\r\n\t\t\t\tsetAutoPlay(false);\r\n\t\t\t\tlastInteraction.current = Date.now();\r\n\t\t\t}\r\n\t\t},\r\n\t\t[speed]\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst canvas = document.querySelector('canvas');\r\n\t\tif (canvas) {\r\n\t\t\tcanvas.addEventListener('wheel', handleWheel, { passive: false });\r\n\t\t\tdocument.addEventListener('keydown', handleKeyDown);\r\n\r\n\t\t\treturn () => {\r\n\t\t\t\tcanvas.removeEventListener('wheel', handleWheel);\r\n\t\t\t\tdocument.removeEventListener('keydown', handleKeyDown);\r\n\t\t\t};\r\n\t\t}\r\n\t}, [handleWheel, handleKeyDown]);\r\n\r\n\t// Auto-play logic\r\n\tuseEffect(() => {\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\tif (Date.now() - lastInteraction.current > 3000) {\r\n\t\t\t\tsetAutoPlay(true);\r\n\t\t\t}\r\n\t\t}, 1000);\r\n\t\treturn () => clearInterval(interval);\r\n\t}, []);\r\n\r\n\tuseFrame((state, delta) => {\r\n\t\t// Apply auto-play\r\n\t\tif (autoPlay) {\r\n\t\t\tsetScrollVelocity((prev) => prev + 0.3 * delta);\r\n\t\t}\r\n\r\n\t\t// Damping\r\n\t\tsetScrollVelocity((prev) => prev * 0.95);\r\n\r\n\t\t// Update time uniform for all materials\r\n\t\tconst time = state.clock.getElapsedTime();\r\n\t\tmaterials.forEach((material) => {\r\n\t\t\tif (material && material.uniforms) {\r\n\t\t\t\tmaterial.uniforms.time.value = time;\r\n\t\t\t\tmaterial.uniforms.scrollForce.value = scrollVelocity;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Update plane positions\r\n\t\tconst imageAdvance =\r\n\t\t\ttotalImages > 0 ? visibleCount % totalImages || totalImages : 0;\r\n\t\tconst totalRange = depthRange;\r\n\t\tconst halfRange = totalRange / 2;\r\n\r\n\t\tplanesData.current.forEach((plane, i) => {\r\n\t\t\tlet newZ = plane.z + scrollVelocity * delta * 10;\r\n\t\t\tlet wrapsForward = 0;\r\n\t\t\tlet wrapsBackward = 0;\r\n\r\n\t\t\tif (newZ >= totalRange) {\r\n\t\t\t\twrapsForward = Math.floor(newZ / totalRange);\r\n\t\t\t\tnewZ -= totalRange * wrapsForward;\r\n\t\t\t} else if (newZ < 0) {\r\n\t\t\t\twrapsBackward = Math.ceil(-newZ / totalRange);\r\n\t\t\t\tnewZ += totalRange * wrapsBackward;\r\n\t\t\t}\r\n\r\n\t\t\tif (wrapsForward > 0 && imageAdvance > 0 && totalImages > 0) {\r\n\t\t\t\tplane.imageIndex =\r\n\t\t\t\t\t(plane.imageIndex + wrapsForward * imageAdvance) % totalImages;\r\n\t\t\t}\r\n\r\n\t\t\tif (wrapsBackward > 0 && imageAdvance > 0 && totalImages > 0) {\r\n\t\t\t\tconst step = plane.imageIndex - wrapsBackward * imageAdvance;\r\n\t\t\t\tplane.imageIndex = ((step % totalImages) + totalImages) % totalImages;\r\n\t\t\t}\r\n\r\n\t\t\tplane.z = ((newZ % totalRange) + totalRange) % totalRange;\r\n\t\t\tplane.x = spatialPositions[i]?.x ?? 0;\r\n\t\t\tplane.y = spatialPositions[i]?.y ?? 0;\r\n\r\n\t\t\tconst worldZ = plane.z - halfRange;\r\n\r\n\t\t\t// Calculate opacity based on fade settings\r\n\t\t\tconst normalizedPosition = plane.z / totalRange; // 0 to 1\r\n\t\t\tlet opacity = 1;\r\n\r\n\t\t\tif (\r\n\t\t\t\tnormalizedPosition >= fadeSettings.fadeIn.start &&\r\n\t\t\t\tnormalizedPosition <= fadeSettings.fadeIn.end\r\n\t\t\t) {\r\n\t\t\t\t// Fade in: opacity goes from 0 to 1 within the fade in range\r\n\t\t\t\tconst fadeInProgress =\r\n\t\t\t\t\t(normalizedPosition - fadeSettings.fadeIn.start) /\r\n\t\t\t\t\t(fadeSettings.fadeIn.end - fadeSettings.fadeIn.start);\r\n\t\t\t\topacity = fadeInProgress;\r\n\t\t\t} else if (normalizedPosition < fadeSettings.fadeIn.start) {\r\n\t\t\t\t// Before fade in starts: fully transparent\r\n\t\t\t\topacity = 0;\r\n\t\t\t} else if (\r\n\t\t\t\tnormalizedPosition >= fadeSettings.fadeOut.start &&\r\n\t\t\t\tnormalizedPosition <= fadeSettings.fadeOut.end\r\n\t\t\t) {\r\n\t\t\t\t// Fade out: opacity goes from 1 to 0 within the fade out range\r\n\t\t\t\tconst fadeOutProgress =\r\n\t\t\t\t\t(normalizedPosition - fadeSettings.fadeOut.start) /\r\n\t\t\t\t\t(fadeSettings.fadeOut.end - fadeSettings.fadeOut.start);\r\n\t\t\t\topacity = 1 - fadeOutProgress;\r\n\t\t\t} else if (normalizedPosition > fadeSettings.fadeOut.end) {\r\n\t\t\t\t// After fade out ends: fully transparent\r\n\t\t\t\topacity = 0;\r\n\t\t\t}\r\n\r\n\t\t\t// Clamp opacity between 0 and 1\r\n\t\t\topacity = Math.max(0, Math.min(1, opacity));\r\n\r\n\t\t\t// Calculate blur based on blur settings\r\n\t\t\tlet blur = 0;\r\n\r\n\t\t\tif (\r\n\t\t\t\tnormalizedPosition >= blurSettings.blurIn.start &&\r\n\t\t\t\tnormalizedPosition <= blurSettings.blurIn.end\r\n\t\t\t) {\r\n\t\t\t\t// Blur in: blur goes from maxBlur to 0 within the blur in range\r\n\t\t\t\tconst blurInProgress =\r\n\t\t\t\t\t(normalizedPosition - blurSettings.blurIn.start) /\r\n\t\t\t\t\t(blurSettings.blurIn.end - blurSettings.blurIn.start);\r\n\t\t\t\tblur = blurSettings.maxBlur * (1 - blurInProgress);\r\n\t\t\t} else if (normalizedPosition < blurSettings.blurIn.start) {\r\n\t\t\t\t// Before blur in starts: full blur\r\n\t\t\t\tblur = blurSettings.maxBlur;\r\n\t\t\t} else if (\r\n\t\t\t\tnormalizedPosition >= blurSettings.blurOut.start &&\r\n\t\t\t\tnormalizedPosition <= blurSettings.blurOut.end\r\n\t\t\t) {\r\n\t\t\t\t// Blur out: blur goes from 0 to maxBlur within the blur out range\r\n\t\t\t\tconst blurOutProgress =\r\n\t\t\t\t\t(normalizedPosition - blurSettings.blurOut.start) /\r\n\t\t\t\t\t(blurSettings.blurOut.end - blurSettings.blurOut.start);\r\n\t\t\t\tblur = blurSettings.maxBlur * blurOutProgress;\r\n\t\t\t} else if (normalizedPosition > blurSettings.blurOut.end) {\r\n\t\t\t\t// After blur out ends: full blur\r\n\t\t\t\tblur = blurSettings.maxBlur;\r\n\t\t\t}\r\n\r\n\t\t\t// Clamp blur to reasonable values\r\n\t\t\tblur = Math.max(0, Math.min(blurSettings.maxBlur, blur));\r\n\r\n\t\t\t// Update material uniforms\r\n\t\t\tconst material = materials[i];\r\n\t\t\tif (material && material.uniforms) {\r\n\t\t\t\tmaterial.uniforms.opacity.value = opacity;\r\n\t\t\t\tmaterial.uniforms.blurAmount.value = blur;\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tif (normalizedImages.length === 0) return null;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{planesData.current.map((plane, i) => {\r\n\t\t\t\tconst texture = textures[plane.imageIndex];\r\n\t\t\t\tconst material = materials[i];\r\n\r\n\t\t\t\tif (!texture || !material) return null;\r\n\r\n\t\t\t\tconst worldZ = plane.z - depthRange / 2;\r\n\r\n\t\t\t\t// Calculate scale to maintain aspect ratio\r\n\t\t\t\tconst aspect = texture.image\r\n\t\t\t\t\t? texture.image.width / texture.image.height\r\n\t\t\t\t\t: 1;\r\n\t\t\t\tconst scale: [number, number, number] =\r\n\t\t\t\t\taspect > 1 ? [2 * aspect, 2, 1] : [2, 2 / aspect, 1];\r\n\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<ImagePlane\r\n\t\t\t\t\t\tkey={plane.index}\r\n\t\t\t\t\t\ttexture={texture}\r\n\t\t\t\t\t\tposition={[plane.x, plane.y, worldZ]} // Position planes relative to camera center\r\n\t\t\t\t\t\tscale={scale}\r\n\t\t\t\t\t\tmaterial={material}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\n// Fallback component for when WebGL is not available\r\nfunction FallbackGallery({ images }: { images: ImageItem[] }) {\r\n\tconst normalizedImages = useMemo(\r\n\t\t() =>\r\n\t\t\timages.map((img) =>\r\n\t\t\t\ttypeof img === 'string' ? { src: img, alt: '' } : img\r\n\t\t\t),\r\n\t\t[images]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"flex flex-col items-center justify-center h-full bg-gray-100 p-4\">\r\n\t\t\t<p className=\"text-gray-600 mb-4\">\r\n\t\t\t\tWebGL not supported. Showing image list:\r\n\t\t\t</p>\r\n\t\t\t<div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 max-h-96 overflow-y-auto\">\r\n\t\t\t\t{normalizedImages.map((img, i) => (\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tsrc={img.src || '/placeholder.svg'}\r\n\t\t\t\t\t\talt={img.alt}\r\n\t\t\t\t\t\tclassName=\"w-full h-32 object-cover rounded\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default function InfiniteGallery({\r\n\timages,\r\n\tclassName = 'h-96 w-full',\r\n\tstyle,\r\n\tfadeSettings = {\r\n\t\tfadeIn: { start: 0.05, end: 0.25 },\r\n\t\tfadeOut: { start: 0.4, end: 0.43 },\r\n\t},\r\n\tblurSettings = {\r\n\t\tblurIn: { start: 0.0, end: 0.1 },\r\n\t\tblurOut: { start: 0.4, end: 0.43 },\r\n\t\tmaxBlur: 8.0,\r\n\t},\r\n}: InfiniteGalleryProps) {\r\n\tconst [webglSupported, setWebglSupported] = useState(true);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Check WebGL support\r\n\t\ttry {\r\n\t\t\tconst canvas = document.createElement('canvas');\r\n\t\t\tconst gl =\r\n\t\t\t\tcanvas.getContext('webgl') || canvas.getContext('experimental-webgl');\r\n\t\t\tif (!gl) {\r\n\t\t\t\tsetWebglSupported(false);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tsetWebglSupported(false);\r\n\t\t}\r\n\t}, []);\r\n\r\n\tif (!webglSupported) {\r\n\t\treturn (\r\n\t\t\t<div className={className} style={style}>\r\n\t\t\t\t<FallbackGallery images={images} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={className} style={style}>\r\n\t\t\t<Canvas\r\n\t\t\t\tcamera={{ position: [0, 0, 0], fov: 55 }}\r\n\t\t\t\tgl={{ antialias: true, alpha: true }}\r\n\t\t\t>\r\n\t\t\t\t<GalleryScene\r\n\t\t\t\t\timages={images}\r\n\t\t\t\t\tfadeSettings={fadeSettings}\r\n\t\t\t\t\tblurSettings={blurSettings}\r\n\t\t\t\t/>\r\n\t\t\t</Canvas>\r\n\t\t</div>\r\n\t);\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}