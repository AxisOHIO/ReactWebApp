{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/allam/Documents/Projects/AXIS/app/dashboard/data-processing/page.js"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nconst DataProcessingPage = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [jsonData, setJsonData] = useState(null);\r\n  const [selectedUserId, setSelectedUserId] = useState('');\r\n  const [availableUserIds, setAvailableUserIds] = useState([]);\r\n  const [chartType, setChartType] = useState('individual');\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n\r\n  const fetchData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const res = await fetch('/api/upload?action=getall');\r\n      \r\n      if (res.ok) {\r\n        const response = await res.json();\r\n        \r\n        // Extract unique userIds\r\n        const userIds = [...new Set(response.files.map(file => file.userId).filter(Boolean))];\r\n        setAvailableUserIds(userIds);\r\n        \r\n        // Set default userId if not selected\r\n        const defaultUserId = selectedUserId || userIds[0];\r\n        if (!selectedUserId && userIds.length > 0) {\r\n          setSelectedUserId(defaultUserId);\r\n        }\r\n        \r\n        const filteredData = filterDataByUserId(response.files, defaultUserId);\r\n        setJsonData({ files: response.files, filtered: filteredData });\r\n        \r\n        if (chartType === 'individual' && filteredData.sessions && filteredData.sessions.length > 0) {\r\n          setTimeout(() => {\r\n            const chartData = generateChartData(filteredData.sessions);\r\n            createChart(chartData);\r\n          }, 100);\r\n        } else if (chartType === 'multiuser') {\r\n          setTimeout(() => {\r\n            const chartData = generateMultiUserChartData(response.files);\r\n            createMultiUserChart(chartData);\r\n          }, 100);\r\n        }\r\n      } else {\r\n        const errorData = await res.json();\r\n        setError(errorData.error);\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to fetch posture data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleUserIdChange = (userId) => {\r\n    setSelectedUserId(userId);\r\n    if (jsonData) {\r\n      const filteredData = filterDataByUserId(jsonData.files, userId);\r\n      setJsonData({ ...jsonData, filtered: filteredData });\r\n      \r\n      if (chartType === 'individual') {\r\n        if (filteredData.sessions && filteredData.sessions.length > 0) {\r\n          setTimeout(() => {\r\n            const chartData = generateChartData(filteredData.sessions);\r\n            createChart(chartData);\r\n          }, 100);\r\n        } else {\r\n          if (chartInstance.current) {\r\n            chartInstance.current.destroy();\r\n            chartInstance.current = null;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const filterDataByUserId = (files, targetUserId) => {\r\n    // Find files that match the target userId\r\n    const matchingFiles = files.filter(file => file.userId === targetUserId);\r\n    \r\n    if (matchingFiles.length === 0) {\r\n      return { userId: targetUserId, sessions: [] };\r\n    }\r\n    \r\n    // Combine sessions from matching files\r\n    const allSessions = [];\r\n    matchingFiles.forEach(file => {\r\n      if (file.sessions) {\r\n        allSessions.push(...file.sessions);\r\n      }\r\n    });\r\n    \r\n    // Sort combined sessions by timestamp\r\n    allSessions.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n    \r\n    return { userId: targetUserId, sessions: allSessions };\r\n  };\r\n\r\n  const generateChartData = (sessions) => {\r\n    const numGroups = 10;\r\n    const groupSize = Math.ceil(sessions.length / numGroups);\r\n    \r\n    const labels = [];\r\n    const goodData = [];\r\n    const badData = [];\r\n    \r\n    for (let i = 0; i < numGroups; i++) {\r\n      const start = i * groupSize;\r\n      const end = Math.min(start + groupSize, sessions.length);\r\n      const group = sessions.slice(start, end);\r\n      \r\n      if (group.length === 0) break;\r\n      \r\n      const startTime = new Date(group[0].timestamp);\r\n      labels.push(startTime.toLocaleTimeString('en-US', { \r\n        hour12: false, \r\n        hour: '2-digit', \r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n      }));\r\n      \r\n      const goodCount = group.filter(s => s.status === 'good').length;\r\n      const badCount = group.filter(s => s.status === 'bad' || s.status === 'moderate').length;\r\n      const total = goodCount + badCount;\r\n      \r\n      const goodPercentage = total > 0 ? (goodCount / total) * 100 : 0;\r\n      const badPercentage = total > 0 ? (badCount / total) * 100 : 0;\r\n      \r\n      goodData.push(goodPercentage);\r\n      badData.push(badPercentage);\r\n    }\r\n    \r\n    return { labels, goodData, badData };\r\n  };\r\n\r\n  const generateMultiUserChartData = (files) => {\r\n    const userDataMap = {};\r\n    \r\n    // Group sessions by userId\r\n    files.forEach(file => {\r\n      if (file.userId && file.sessions) {\r\n        if (!userDataMap[file.userId]) {\r\n          userDataMap[file.userId] = [];\r\n        }\r\n        userDataMap[file.userId].push(...file.sessions);\r\n      }\r\n    });\r\n    \r\n    const numGroups = 10;\r\n    const labels = [];\r\n    const datasets = [];\r\n    const colors = ['#10b981', '#3b82f6', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4', '#f97316', '#84cc16'];\r\n    \r\n    // Generate time labels based on first user's data\r\n    const firstUserId = Object.keys(userDataMap)[0];\r\n    if (firstUserId) {\r\n      const sessions = userDataMap[firstUserId].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n      const groupSize = Math.ceil(sessions.length / numGroups);\r\n      \r\n      for (let i = 0; i < numGroups; i++) {\r\n        const start = i * groupSize;\r\n        const group = sessions.slice(start, start + groupSize);\r\n        if (group.length > 0) {\r\n          const startTime = new Date(group[0].timestamp);\r\n          labels.push(startTime.toLocaleTimeString('en-US', { \r\n            hour12: false, \r\n            hour: '2-digit', \r\n            minute: '2-digit',\r\n            second: '2-digit'\r\n          }));\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Generate dataset for each user\r\n    Object.keys(userDataMap).forEach((userId, index) => {\r\n      const sessions = userDataMap[userId].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n      const groupSize = Math.ceil(sessions.length / numGroups);\r\n      const goodData = [];\r\n      \r\n      for (let i = 0; i < numGroups; i++) {\r\n        const start = i * groupSize;\r\n        const end = Math.min(start + groupSize, sessions.length);\r\n        const group = sessions.slice(start, end);\r\n        const goodCount = group.filter(s => s.status === 'good').length;\r\n        const badCount = group.filter(s => s.status === 'bad' || s.status === 'moderate').length;\r\n        const total = goodCount + badCount;\r\n        \r\n        const goodPercentage = total > 0 ? (goodCount / total) * 100 : 0;\r\n        goodData.push(goodPercentage);\r\n      }\r\n      \r\n      datasets.push({\r\n        label: userId,\r\n        data: goodData,\r\n        borderColor: colors[index % colors.length],\r\n        backgroundColor: `${colors[index % colors.length]}20`,\r\n        borderWidth: 2,\r\n        fill: false,\r\n        tension: 0.1\r\n      });\r\n    });\r\n    \r\n    return { labels, datasets };\r\n  };\r\n\r\n  const createChart = (chartData) => {\r\n    if (!chartRef.current) {\r\n      console.error('Chart canvas not found');\r\n      return;\r\n    }\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const ctx = chartRef.current.getContext('2d');\r\n    \r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: chartData.labels,\r\n        datasets: [\r\n          {\r\n            label: 'Good',\r\n            data: chartData.goodData,\r\n            borderColor: '#10b981',\r\n            backgroundColor: 'rgba(16, 185, 129, 0.1)',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n          },\r\n          {\r\n            label: 'Bad',\r\n            data: chartData.badData,\r\n            borderColor: '#ef4444',\r\n            backgroundColor: 'rgba(239, 68, 68, 0.1)',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Posture Status Frequency Over Time',\r\n            color: 'white'\r\n          },\r\n          legend: {\r\n            position: 'top',\r\n            labels: {\r\n              color: 'white'\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Time',\r\n              color: 'white'\r\n            },\r\n            ticks: {\r\n              maxRotation: 45,\r\n              minRotation: 0,\r\n              color: 'white'\r\n            },\r\n            grid: {\r\n              display: true,\r\n              color: 'rgba(255, 255, 255, 0.2)',\r\n              lineWidth: 1\r\n            }\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Percentage (%)',\r\n              color: 'white'\r\n            },\r\n            ticks: {\r\n              color: 'white'\r\n            },\r\n            beginAtZero: true,\r\n            max: 100,\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.2)'\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const createMultiUserChart = (chartData) => {\r\n    if (!chartRef.current) {\r\n      console.error('Chart canvas not found');\r\n      return;\r\n    }\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const ctx = chartRef.current.getContext('2d');\r\n    \r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n        labels: chartData.labels,\r\n        datasets: chartData.datasets\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Good Posture Comparison Across Users',\r\n            color: 'white'\r\n          },\r\n          legend: {\r\n            position: 'top',\r\n            labels: {\r\n              color: 'white'\r\n            }\r\n          }\r\n        },\r\n        scales: {\r\n          x: {\r\n            title: {\r\n              display: true,\r\n              text: 'Time',\r\n              color: 'white'\r\n            },\r\n            ticks: {\r\n              maxRotation: 45,\r\n              minRotation: 0,\r\n              color: 'white'\r\n            },\r\n            grid: {\r\n              display: true,\r\n              color: 'rgba(255, 255, 255, 0.2)',\r\n              lineWidth: 1\r\n            }\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Good Posture (%)',\r\n              color: 'white'\r\n            },\r\n            ticks: {\r\n              color: 'white'\r\n            },\r\n            beginAtZero: true,\r\n            max: 100,\r\n            grid: {\r\n              color: 'rgba(255, 255, 255, 0.2)'\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"min-h-screen p-6 pt-24\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <div className={`liquid-glass rounded-2xl p-8 ${loading ? 'loading' : ''}`}>\r\n          <h1 className=\"text-2xl font-bold mb-4 text-white\">Access JSON Data from S3</h1>\r\n          <p className=\"text-white/80 mb-6\">Fetch and combine all JSON files from posture folder</p>\r\n          \r\n          <button\r\n            onClick={fetchData}\r\n            disabled={loading}\r\n            className=\"w-full bg-blue-600 text-white py-3 px-4 rounded hover:bg-blue-700 disabled:bg-gray-400 flex items-center justify-center\"\r\n          >\r\n            {loading && (\r\n              <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n              </svg>\r\n            )}\r\n            {loading ? 'Fetching...' : 'Fetch All Posture Data'}\r\n          </button>\r\n\r\n          {availableUserIds.length > 0 && (\r\n            <div className=\"mt-4 space-y-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-white mb-2\">\r\n                  Chart Type:\r\n                </label>\r\n                <select\r\n                  value={chartType}\r\n                  onChange={(e) => setChartType(e.target.value)}\r\n                  className=\"inline-block p-2 bg-black border border-white/30 rounded text-white focus:ring-2 focus:ring-white/50 focus:border-white/50 mr-4\"\r\n                >\r\n                  <option value=\"individual\">Individual User</option>\r\n                  <option value=\"multiuser\">All Users (Good Posture)</option>\r\n                </select>\r\n              </div>\r\n              \r\n              {chartType === 'individual' && (\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-white mb-2\">\r\n                    Select User ID:\r\n                  </label>\r\n                  <select\r\n                    value={selectedUserId}\r\n                    onChange={(e) => handleUserIdChange(e.target.value)}\r\n                    className=\"inline-block p-2 bg-black border border-white/30 rounded text-white focus:ring-2 focus:ring-white/50 focus:border-white/50\"\r\n                  >\r\n                    {availableUserIds.map(userId => (\r\n                      <option key={userId} value={userId}>{userId}</option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded\">\r\n              <p className=\"text-red-700\">{error}</p>\r\n            </div>\r\n          )}\r\n\r\n          {jsonData && (\r\n            <div className=\"mt-6 space-y-6\">\r\n              <div>\r\n                <h2 className=\"text-lg font-semibold mb-3 text-white\">Posture Status Chart:</h2>\r\n                <div className=\"bg-black/30 border border-white/20 p-4 rounded\" style={{ height: '400px' }}>\r\n                  <canvas ref={chartRef}></canvas>\r\n                </div>\r\n              </div>\r\n              \r\n              <div>\r\n                <h2 className=\"text-lg font-semibold mb-3 text-white\">Raw JSON Data:</h2>\r\n                <pre className=\"bg-black/30 border border-white/20 p-4 rounded text-sm overflow-auto max-h-96 text-white\">\r\n                  {JSON.stringify(jsonData, null, 2)}\r\n                </pre>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataProcessingPage;"],"names":[],"mappings":"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","debugId":null}}]
}